// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MeetingSDK_macOS
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AppKit
import Foundation
@_exported import MeetingSDK_macOS
import Swift
import _Concurrency
public protocol MeetingSDKDelegate : AnyObject {
  func participantAdded(participant: MeetingSDK_macOS.Participant)
  func participantAudioAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  func participantAudioUpdated(participant: MeetingSDK_macOS.Participant)
  func participantVideoAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  func participantVideoUpdated(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  func participantVideoViewCreated(participant: MeetingSDK_macOS.Participant, videoView: MeetingSDK_macOS.VideoView, local: Swift.Bool)
  func participantVideoRemoved(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  func participantRemoved(participant: MeetingSDK_macOS.Participant)
  func inputMeterChanged(meter: Swift.Int)
  func outputMeterChanged(meter: Swift.Int)
  func participantAmplitudeChanged(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  func logMessage(level: Swift.Int, message: Swift.String)
  func amplitude(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int)
  func binaryPlaybackEnded(id: Swift.UInt64)
  func binaryPlaybackFailed(id: Swift.UInt64)
  func screenShareCancelled()
}
extension MeetingSDK_macOS.MeetingSDKDelegate {
  public func participantAdded(participant: MeetingSDK_macOS.Participant)
  public func participantAudioAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  public func participantAudioUpdated(participant: MeetingSDK_macOS.Participant)
  public func participantVideoAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  public func participantVideoUpdated(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  public func participantVideoViewCreated(participant: MeetingSDK_macOS.Participant, videoView: MeetingSDK_macOS.VideoView, local: Swift.Bool)
  public func participantVideoRemoved(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  public func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  public func inputMeterChanged(meter: Swift.Int)
  public func outputMeterChanged(meter: Swift.Int)
  public func participantAmplitudeChanged(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  public func logMessage(level: Swift.Int, message: Swift.String)
  public func amplitude(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int)
  public func binaryPlaybackEnded(id: Swift.UInt64)
  public func binaryPlaybackFailed(id: Swift.UInt64)
  public func screenShareCancelled()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeetingSDKDelegateBridge : ObjectiveC.NSObject {
  @objc public func participantAdded(participant: MeetingSDK_macOS.Participant)
  @objc public func participantAudioAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  @objc public func participantAudioUpdated(participant: MeetingSDK_macOS.Participant)
  @objc public func participantVideoAdded(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  @objc public func participantVideoUpdated(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  @objc public func participantVideoViewCreated(participant: MeetingSDK_macOS.Participant, videoView: MeetingSDK_macOS.VideoView, local: Swift.Bool)
  @objc public func videoFrameReady(streamId: Swift.String, frame: Foundation.Data)
  @objc public func participantVideoRemoved(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  @objc public func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_macOS.Participant, streamId: Swift.String)
  @objc public func participantRemoved(participant: MeetingSDK_macOS.Participant)
  @objc public func inputMeterChanged(meter: Swift.Int)
  @objc public func outputMeterChanged(meter: Swift.Int)
  @objc public func participantAmplitudeChanged(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  @objc public func logMessage(level: Swift.Int, message: Swift.String)
  @objc public func amplitude(participant: MeetingSDK_macOS.Participant, amplitude: Swift.Int)
  @objc public func binaryPlaybackEnded(id: Swift.UInt64)
  @objc public func binaryPlaybackFailed(id: Swift.UInt64)
  @objc public func screenShareCancelled()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class VideoView : AppKit.NSView {
  @objc @_Concurrency.MainActor(unsafe) public var frameView: AppKit.NSImageView?
  @objc @_Concurrency.MainActor(unsafe) dynamic public var imageData: Foundation.Data?
  @objc @_Concurrency.MainActor(unsafe) public var streamId: Swift.String
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set(newValue)
  }
  @objc deinit
}
@objc public class Participant : MeetingSDK_macOS.CMParticipant {
  @objc public init(_ userUUID: Swift.String)
  public var audioInfo: MeetingSDK_macOS.AudioInfo? {
    get
  }
  public var videoInfo: [Swift.String : MeetingSDK_macOS.VideoInfo]? {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
  public var displayName: Swift.String {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AudioInfo : MeetingSDK_macOS.CMAudioInfo {
  public var streamId: Swift.String {
    get
  }
  public var site: Swift.String {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class VideoInfo : MeetingSDK_macOS.CMVideoInfo {
  public var streamId: Swift.String {
    get
  }
  public var site: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var codecName: Swift.String {
    get
  }
  public var local: Swift.Bool {
    get
  }
  public var active: Swift.Bool {
    get
  }
  public var layout: Swift.UInt32 {
    get
  }
  public var width: Swift.UInt32 {
    get
  }
  public var height: Swift.UInt32 {
    get
  }
  public var videoView: MeetingSDK_macOS.VideoView? {
    get
  }
  @objc deinit
}
public enum iOSCamera : Swift.String {
  case front
  case back
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CameraMode : Swift.String {
  case cif
  case vga
  case hd1
  case hd3
  case fourK
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DebugLevel : Swift.Int {
  case none
  case err
  case warn
  case info
  case dbg1
  case dbg2
  case dbg3
  case dbg4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeetingSDK : ObjectiveC.NSObject {
  public static let shared: MeetingSDK_macOS.MeetingSDK
  public var delegate: MeetingSDK_macOS.MeetingSDKDelegate?
  public func pauseVideoFrameProcessing(streamId: Swift.String)
  public func resumeVideoFrameProcessing(streamId: Swift.String)
  public func getParticipants() -> [MeetingSDK_macOS.Participant]
  public func initializeMeeting(meetingUUID: Swift.String, server: Swift.String, completion: @escaping (Swift.Bool, Swift.String) -> ())
  public func initializeMeetingWithToken(meetingUUID: Swift.String, server: Swift.String, token: Swift.String?, completion: @escaping (Swift.Bool, Swift.String) -> ())
  public func joinMeeting(server: Swift.String, meetingUUID: Swift.String, key: Swift.String, userUUID: Swift.String = "", name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func joinMeetingWithToken(server: Swift.String, meetingUUID: Swift.String, token: Swift.String, userUUID: Swift.String = "", name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func enableAudioInput(device: Swift.String) -> Swift.Bool
  public func disableAudioInput(device: Swift.String)
  public func disableAudioInput()
  public func enableAudioOutput(device: Swift.String) -> Swift.Bool
  public func disableAudioOutput(device: Swift.String)
  public func disableAudioOutput()
  public func setAudioStreamVolume(streamId: Swift.String, volume: Swift.Int32)
  public func setAudioInputVolume(_ volume: Swift.Int32) -> Swift.Bool
  public func setAudioOutputVolume(_ volume: Swift.Int32) -> Swift.Bool
  public func enableVideoCapture(camera: Swift.String, withMode: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func disableVideoCapture(camera: Swift.String)
  public func enableWindowSharing(windowId: Swift.String, mode: Swift.String) -> Swift.Bool
  public func disableWindowSharing(windowId: Swift.String) -> Swift.Bool
  public func enableNetworkVideo(url: Swift.String, mode: Swift.String, name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func disableNetworkVideo(url: Swift.String)
  public func disableVideoStream(streamId: Swift.String)
  public func enableVideoStream(participant: MeetingSDK_macOS.Participant, streamId: Swift.String, lowLevel: Swift.Bool = false)
  public func exitMeeting()
  public func findVideoInfo(streamId: Swift.String) -> MeetingSDK_macOS.VideoInfo?
  public func findParticipant(withVideoStreamId: Swift.String) -> MeetingSDK_macOS.Participant?
  public func findParticipant(withAudioStreamId: Swift.String) -> MeetingSDK_macOS.Participant?
  public func enableInlineAudioVideoLogging(_ enable: Swift.Bool)
  public func setTraceLevel(_ level: MeetingSDK_macOS.DebugLevel)
  public func audioSetTraceLevel(_ level: MeetingSDK_macOS.DebugLevel)
  public func videoSetTraceLevel(_ level: MeetingSDK_macOS.DebugLevel)
  public func videoTraceOutputHistory(_ filename: Swift.String)
  public func audioTraceOutputHistory(_ filename: Swift.String)
  public func getVideoDevices() -> [Swift.String]
  public func getAudioInputDevices() -> [Swift.String]
  public func getAudioOutputDevices() -> [Swift.String]
  public func playSound(_ resource: Swift.String) -> Swift.UInt64
  public func stopSound(_ id: Swift.UInt64)
  public func getSupportedVideoSendResolutions(deviceId: Swift.String) -> [Swift.String]
  public func getLocalParticipant() -> MeetingSDK_macOS.Participant?
  @objc deinit
}
public enum XMLSubscriptKey {
  case index(Swift.Int)
  case key(Swift.String)
  case attribute(Swift.String)
}
public enum XMLError : Swift.Error {
  case subscriptFailue(Swift.String)
  case initFailue(Swift.String)
  case wrongChain(Swift.String)
}
@dynamicMemberLookup public enum XMLSubscriptResult {
  case null(Swift.String)
  case xml(MeetingSDK_macOS.XML, Swift.String)
  case array([MeetingSDK_macOS.XML], Swift.String)
  case string(Swift.String, Swift.String)
  public subscript(dynamicMember member: Swift.String) -> MeetingSDK_macOS.XMLSubscriptResult {
    get
  }
  public subscript(key: MeetingSDK_macOS.XMLSubscriptKey) -> MeetingSDK_macOS.XMLSubscriptResult {
    get
  }
  public var xml: MeetingSDK_macOS.XML? {
    get
  }
  public func getXML() throws -> MeetingSDK_macOS.XML
  public var xmlList: [MeetingSDK_macOS.XML]? {
    get
  }
  public func getXMLList() throws -> [MeetingSDK_macOS.XML]
  public var error: Swift.String {
    get
  }
}
@dynamicMemberLookup open class XML {
  public var xmlName: Swift.String {
    get
    set
  }
  public var xmlAttributes: [Swift.String : Swift.String] {
    get
    set
  }
  public var xmlValue: Swift.String? {
    get
    set
  }
  public var xmlChildren: [MeetingSDK_macOS.XML] {
    get
  }
  public init(name: Swift.String, attributes: [Swift.String : Any] = [:], value: Any? = nil)
  convenience public init!(data: Foundation.Data)
  convenience public init!(url: Foundation.URL)
  convenience public init(named name: Swift.String)
  convenience public init(string: Swift.String, encoding: Swift.String.Encoding = .utf8)
  public subscript(dynamicMember member: Swift.String) -> MeetingSDK_macOS.XMLSubscriptResult {
    get
  }
  public subscript(key: MeetingSDK_macOS.XMLSubscriptKey) -> MeetingSDK_macOS.XMLSubscriptResult {
    get
  }
  @discardableResult
  public func addAttribute(name: Swift.String, value: Any) -> MeetingSDK_macOS.XML
  @discardableResult
  public func addAttributes(_ attributes: [Swift.String : Any]) -> MeetingSDK_macOS.XML
  @discardableResult
  public func addChild(_ xml: MeetingSDK_macOS.XML) -> MeetingSDK_macOS.XML
  @discardableResult
  public func addChildren(_ xmls: [MeetingSDK_macOS.XML]) -> MeetingSDK_macOS.XML
  @objc deinit
}
public class XMLSubscriptResultIterator : Swift.IteratorProtocol {
  public init(result: MeetingSDK_macOS.XMLSubscriptResult)
  public func next() -> MeetingSDK_macOS.XML?
  public typealias Element = MeetingSDK_macOS.XML
  @objc deinit
}
extension MeetingSDK_macOS.XMLSubscriptResult : Swift.Sequence {
  public typealias Iterator = MeetingSDK_macOS.XMLSubscriptResultIterator
  public func makeIterator() -> MeetingSDK_macOS.XMLSubscriptResult.Iterator
  public typealias Element = MeetingSDK_macOS.XML
}
public protocol StringProvider {
  var string: Swift.String? { get }
}
extension MeetingSDK_macOS.XML : MeetingSDK_macOS.StringProvider {
  public var string: Swift.String? {
    get
  }
}
extension MeetingSDK_macOS.XMLSubscriptResult : MeetingSDK_macOS.StringProvider {
  public var string: Swift.String? {
    get
  }
}
extension MeetingSDK_macOS.StringProvider {
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt8
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt16
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt32
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt64
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int8
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int16
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int32
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int64
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt8
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt16
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt32
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt64
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int8
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int16
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int32
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int64
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int
}
extension MeetingSDK_macOS.StringProvider {
  public var bool: Swift.Bool? {
    get
  }
  public var uInt8: Swift.UInt8? {
    get
  }
  public var uInt16: Swift.UInt16? {
    get
  }
  public var uInt32: Swift.UInt32? {
    get
  }
  public var uInt64: Swift.UInt64? {
    get
  }
  public var uInt: Swift.UInt? {
    get
  }
  public var int8: Swift.Int8? {
    get
  }
  public var int16: Swift.Int16? {
    get
  }
  public var int32: Swift.Int32? {
    get
  }
  public var int64: Swift.Int64? {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var float: Swift.Float? {
    get
  }
  public var double: Swift.Double? {
    get
  }
}
extension MeetingSDK_macOS.StringProvider {
  public var boolValue: Swift.Bool {
    get
  }
  public var uInt8Value: Swift.UInt8 {
    get
  }
  public var uInt16Value: Swift.UInt16 {
    get
  }
  public var uInt32Value: Swift.UInt32 {
    get
  }
  public var uInt64Value: Swift.UInt64 {
    get
  }
  public var uIntValue: Swift.UInt {
    get
  }
  public var int8Value: Swift.Int8 {
    get
  }
  public var int16Value: Swift.Int16 {
    get
  }
  public var int32Value: Swift.Int32 {
    get
  }
  public var int64Value: Swift.Int64 {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension MeetingSDK_macOS.XML {
  public var description: Swift.String {
    get
  }
  public func toXMLString() -> Swift.String
}
@objc public class SimpleXMLParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  public var root: MeetingSDK_macOS.XML?
  final public let data: Foundation.Data
  @objc deinit
  public init(data: Foundation.Data)
  public func parse() throws
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: Swift.Error)
}
extension MeetingSDK_macOS.iOSCamera : Swift.Equatable {}
extension MeetingSDK_macOS.iOSCamera : Swift.Hashable {}
extension MeetingSDK_macOS.iOSCamera : Swift.RawRepresentable {}
extension MeetingSDK_macOS.CameraMode : Swift.Equatable {}
extension MeetingSDK_macOS.CameraMode : Swift.Hashable {}
extension MeetingSDK_macOS.CameraMode : Swift.RawRepresentable {}
extension MeetingSDK_macOS.DebugLevel : Swift.Equatable {}
extension MeetingSDK_macOS.DebugLevel : Swift.Hashable {}
extension MeetingSDK_macOS.DebugLevel : Swift.RawRepresentable {}
