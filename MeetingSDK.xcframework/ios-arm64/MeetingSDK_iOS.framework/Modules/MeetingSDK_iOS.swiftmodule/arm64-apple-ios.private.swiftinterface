// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MeetingSDK_iOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
@_exported import MeetingSDK_iOS
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VideoView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var frameView: UIKit.UIImageView?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var imageData: Foundation.Data
  @objc @_Concurrency.MainActor @preconcurrency public var streamId: Swift.String
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set(newValue)
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AudioCondition : MeetingSDK_iOS.CMAudioCondition {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class Participant : MeetingSDK_iOS.CMParticipant {
  @objc public init(_ userUUID: Swift.String)
  public var audioInfo: MeetingSDK_iOS.AudioInfo? {
    get
  }
  public var videoInfo: [Swift.String : MeetingSDK_iOS.VideoInfo]? {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
  public var displayName: Swift.String {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class AudioInfo : MeetingSDK_iOS.CMAudioInfo {
  public var streamId: Swift.String {
    get
  }
  public var site: Swift.String {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class VideoInfo : MeetingSDK_iOS.CMVideoInfo {
  public var streamId: Swift.String {
    get
  }
  public var site: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var codecName: Swift.String {
    get
  }
  public var local: Swift.Bool {
    get
  }
  public var active: Swift.Bool {
    get
  }
  public var ptzStatus: Swift.Bool {
    get
  }
  public var layout: Swift.UInt32 {
    get
  }
  public var width: Swift.UInt32 {
    get
  }
  public var height: Swift.UInt32 {
    get
  }
  public var isScreenShare: Swift.Bool {
    get
  }
  public var videoView: MeetingSDK_iOS.VideoView? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VisionableAPI {
  public static let shared: MeetingSDK_iOS.VisionableAPI
  public func authenticate(server: Swift.String, id: Swift.String, password: Swift.String, completion: @escaping (Swift.String) -> ())
  public func initializeMeeting(server: Swift.String, meetingUUID: Swift.String, completion: @escaping (Swift.Bool, Swift.String) -> ())
  public func initializeMeetingWithToken(server: Swift.String, meetingUUID: Swift.String, token: Swift.String?, completion: @escaping (Swift.Bool, Swift.String) -> ())
  @objc deinit
}
public enum XMLSubscriptKey {
  case index(Swift.Int)
  case key(Swift.String)
  case attribute(Swift.String)
}
public enum XMLError : Swift.Error {
  case subscriptFailue(Swift.String)
  case initFailue(Swift.String)
  case wrongChain(Swift.String)
}
@dynamicMemberLookup public enum XMLSubscriptResult {
  case null(Swift.String)
  case xml(MeetingSDK_iOS.XML, Swift.String)
  case array([MeetingSDK_iOS.XML], Swift.String)
  case string(Swift.String, Swift.String)
  public subscript(dynamicMember member: Swift.String) -> MeetingSDK_iOS.XMLSubscriptResult {
    get
  }
  public subscript(key: MeetingSDK_iOS.XMLSubscriptKey) -> MeetingSDK_iOS.XMLSubscriptResult {
    get
  }
  public var xml: MeetingSDK_iOS.XML? {
    get
  }
  public func getXML() throws -> MeetingSDK_iOS.XML
  public var xmlList: [MeetingSDK_iOS.XML]? {
    get
  }
  public func getXMLList() throws -> [MeetingSDK_iOS.XML]
  public var error: Swift.String {
    get
  }
}
@dynamicMemberLookup open class XML {
  public var xmlName: Swift.String {
    get
    set
  }
  public var xmlAttributes: [Swift.String : Swift.String] {
    get
    set
  }
  public var xmlValue: Swift.String? {
    get
    set
  }
  public var xmlChildren: [MeetingSDK_iOS.XML] {
    get
  }
  public init(name: Swift.String, attributes: [Swift.String : Any] = [:], value: Any? = nil)
  convenience public init!(data: Foundation.Data)
  convenience public init!(url: Foundation.URL)
  convenience public init(named name: Swift.String)
  convenience public init(string: Swift.String, encoding: Swift.String.Encoding = .utf8)
  public subscript(dynamicMember member: Swift.String) -> MeetingSDK_iOS.XMLSubscriptResult {
    get
  }
  public subscript(key: MeetingSDK_iOS.XMLSubscriptKey) -> MeetingSDK_iOS.XMLSubscriptResult {
    get
  }
  @discardableResult
  public func addAttribute(name: Swift.String, value: Any) -> MeetingSDK_iOS.XML
  @discardableResult
  public func addAttributes(_ attributes: [Swift.String : Any]) -> MeetingSDK_iOS.XML
  @discardableResult
  public func addChild(_ xml: MeetingSDK_iOS.XML) -> MeetingSDK_iOS.XML
  @discardableResult
  public func addChildren(_ xmls: [MeetingSDK_iOS.XML]) -> MeetingSDK_iOS.XML
  @objc deinit
}
public class XMLSubscriptResultIterator : Swift.IteratorProtocol {
  public init(result: MeetingSDK_iOS.XMLSubscriptResult)
  public func next() -> MeetingSDK_iOS.XML?
  public typealias Element = MeetingSDK_iOS.XML
  @objc deinit
}
extension MeetingSDK_iOS.XMLSubscriptResult : Swift.Sequence {
  public typealias Iterator = MeetingSDK_iOS.XMLSubscriptResultIterator
  public func makeIterator() -> MeetingSDK_iOS.XMLSubscriptResult.Iterator
  public typealias Element = MeetingSDK_iOS.XML
}
public protocol StringProvider {
  var string: Swift.String? { get }
}
extension MeetingSDK_iOS.XML : MeetingSDK_iOS.StringProvider {
  public var string: Swift.String? {
    get
  }
}
extension MeetingSDK_iOS.XMLSubscriptResult : MeetingSDK_iOS.StringProvider {
  public var string: Swift.String? {
    get
  }
}
extension MeetingSDK_iOS.StringProvider {
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt8
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt16
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt32
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt64
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.UInt
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int8
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int16
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int32
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int64
  public func `enum`<T>() -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.Int
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt8
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt16
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt32
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt64
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.UInt
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int8
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int16
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int32
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int64
  public func getEnum<T>() throws -> T where T : Swift.RawRepresentable, T.RawValue == Swift.Int
}
extension MeetingSDK_iOS.StringProvider {
  public var bool: Swift.Bool? {
    get
  }
  public var uInt8: Swift.UInt8? {
    get
  }
  public var uInt16: Swift.UInt16? {
    get
  }
  public var uInt32: Swift.UInt32? {
    get
  }
  public var uInt64: Swift.UInt64? {
    get
  }
  public var uInt: Swift.UInt? {
    get
  }
  public var int8: Swift.Int8? {
    get
  }
  public var int16: Swift.Int16? {
    get
  }
  public var int32: Swift.Int32? {
    get
  }
  public var int64: Swift.Int64? {
    get
  }
  public var int: Swift.Int? {
    get
  }
  public var float: Swift.Float? {
    get
  }
  public var double: Swift.Double? {
    get
  }
}
extension MeetingSDK_iOS.StringProvider {
  public var boolValue: Swift.Bool {
    get
  }
  public var uInt8Value: Swift.UInt8 {
    get
  }
  public var uInt16Value: Swift.UInt16 {
    get
  }
  public var uInt32Value: Swift.UInt32 {
    get
  }
  public var uInt64Value: Swift.UInt64 {
    get
  }
  public var uIntValue: Swift.UInt {
    get
  }
  public var int8Value: Swift.Int8 {
    get
  }
  public var int16Value: Swift.Int16 {
    get
  }
  public var int32Value: Swift.Int32 {
    get
  }
  public var int64Value: Swift.Int64 {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public var floatValue: Swift.Float {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension MeetingSDK_iOS.XML {
  public var description: Swift.String {
    get
  }
  public func toXMLString() -> Swift.String
}
@objc public class SimpleXMLParser : ObjectiveC.NSObject, Foundation.XMLParserDelegate {
  public var root: MeetingSDK_iOS.XML?
  final public let data: Foundation.Data
  @objc deinit
  public init(data: Foundation.Data)
  public func parse() throws
  @objc public func parser(_ parser: Foundation.XMLParser, didStartElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?, attributes attributeDict: [Swift.String : Swift.String])
  @objc public func parser(_ parser: Foundation.XMLParser, foundCharacters string: Swift.String)
  @objc public func parser(_ parser: Foundation.XMLParser, didEndElement elementName: Swift.String, namespaceURI: Swift.String?, qualifiedName qName: Swift.String?)
  @objc public func parser(_ parser: Foundation.XMLParser, parseErrorOccurred parseError: any Swift.Error)
}
public protocol MeetingSDKDelegate : AnyObject {
  func meetingToken(decodedToken: Swift.String)
  func participantAdded(participant: MeetingSDK_iOS.Participant)
  func participantAudioAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  func participantAudioUpdated(participant: MeetingSDK_iOS.Participant)
  func participantVideoAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  func participantVideoUpdated(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  func participantVideoViewCreated(participant: MeetingSDK_iOS.Participant, videoView: MeetingSDK_iOS.VideoView, local: Swift.Bool)
  func previewVideoViewCreated(videoView: MeetingSDK_iOS.VideoView)
  func previewVideoUpdated(streamId: Swift.String)
  func participantVideoViewRetrieved(participant: MeetingSDK_iOS.Participant, videoView: MeetingSDK_iOS.VideoView, local: Swift.Bool)
  func participantVideoRemoved(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  func participantRemoved(participant: MeetingSDK_iOS.Participant)
  func inputMeterChanged(meter: Swift.Int)
  func outputMeterChanged(meter: Swift.Int)
  func participantAmplitudeChanged(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  func logMessage(level: Swift.Int, message: Swift.String)
  func amplitude(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int)
  func binaryPlaybackEnded(id: Swift.UInt64)
  func binaryPlaybackFailed(id: Swift.UInt64)
  func screenShareCancelled()
  func meetingDisconnected()
  func participantNetworkQuality(participant: MeetingSDK_iOS.Participant, streamId: Swift.String, quality: MeetingSDK_iOS.NetworkQuality)
  func networkQuality(quality: MeetingSDK_iOS.NetworkQuality)
  func connectionStatus(status: MeetingSDK_iOS.ConnectionStatus)
  func audioConditionUpdate(audioCondition: MeetingSDK_iOS.AudioCondition)
  func videoConditionUpdate(videoCondition: MeetingSDK_iOS.VideoCondition)
}
extension MeetingSDK_iOS.MeetingSDKDelegate {
  public func meetingToken(decodedToken: Swift.String)
  public func participantAdded(participant: MeetingSDK_iOS.Participant)
  public func participantAudioAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  public func participantAudioUpdated(participant: MeetingSDK_iOS.Participant)
  public func participantVideoAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  public func participantVideoUpdated(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  public func participantVideoViewCreated(participant: MeetingSDK_iOS.Participant, videoView: MeetingSDK_iOS.VideoView, local: Swift.Bool)
  public func participantVideoViewRetrieved(participant: MeetingSDK_iOS.Participant, videoView: MeetingSDK_iOS.VideoView, local: Swift.Bool)
  public func previewVideoViewCreated(videoView: MeetingSDK_iOS.VideoView)
  public func previewVideoUpdated(streamId: Swift.String)
  public func participantVideoRemoved(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  public func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  public func participantRemoved(participant: MeetingSDK_iOS.Participant)
  public func inputMeterChanged(meter: Swift.Int)
  public func outputMeterChanged(meter: Swift.Int)
  public func participantAmplitudeChanged(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  public func logMessage(level: Swift.Int, message: Swift.String)
  public func amplitude(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int)
  public func binaryPlaybackEnded(id: Swift.UInt64)
  public func binaryPlaybackFailed(id: Swift.UInt64)
  public func screenShareCancelled()
  public func meetingDisconnected()
  public func participantNetworkQuality(participant: MeetingSDK_iOS.Participant, streamId: Swift.String, quality: MeetingSDK_iOS.NetworkQuality)
  public func networkQuality(quality: MeetingSDK_iOS.NetworkQuality)
  public func connectionStatus(status: MeetingSDK_iOS.ConnectionStatus)
  public func audioConditionUpdate(audioCondition: MeetingSDK_iOS.AudioCondition)
  public func videoConditionUpdate(videoCondition: MeetingSDK_iOS.VideoCondition)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeetingSDKDelegateBridge : ObjectiveC.NSObject {
  @objc public func meetingToken(decodedToken: Swift.String)
  @objc public func participantAdded(participant: MeetingSDK_iOS.Participant)
  @objc public func participantAudioAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  @objc public func participantAudioUpdated(participant: MeetingSDK_iOS.Participant)
  @objc public func participantVideoAdded(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  @objc public func participantVideoUpdated(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  @objc public func participantVideoViewCreated(participant: MeetingSDK_iOS.Participant, videoView: MeetingSDK_iOS.VideoView, local: Swift.Bool)
  @objc public func videoFrameReady(streamId: Swift.String, frame: Foundation.Data)
  @objc public func videoPreviewReady(streamId: Swift.String, name: Swift.String, width: Swift.Int32, height: Swift.Int32)
  @objc public func previewVideoUpdated(streamId: Swift.String)
  @objc public func previewFrameReady(streamId: Swift.String, frame: Foundation.Data)
  @objc public func participantVideoRemoved(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  @objc public func particpantVideoRemoteLayoutChanged(participant: MeetingSDK_iOS.Participant, streamId: Swift.String)
  @objc public func participantRemoved(participant: MeetingSDK_iOS.Participant)
  @objc public func inputMeterChanged(meter: Swift.Int)
  @objc public func outputMeterChanged(meter: Swift.Int)
  @objc public func participantAmplitudeChanged(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int, muted: Swift.Bool)
  @objc public func logMessage(level: Swift.Int, message: Swift.String)
  @objc public func amplitude(participant: MeetingSDK_iOS.Participant, amplitude: Swift.Int)
  @objc public func binaryPlaybackEnded(id: Swift.UInt64)
  @objc public func binaryPlaybackFailed(id: Swift.UInt64)
  @objc public func screenShareCancelled()
  @objc public func meetingDisconnected()
  @objc public func participantNetworkQuality(participant: MeetingSDK_iOS.Participant, streamId: Swift.String, bars: Swift.Int32)
  @objc public func networkQuality(bars: Swift.Int32)
  @objc public func connectionStatus(status: Swift.Int32)
  @objc public func audioConditionUpdate(audioCondition: MeetingSDK_iOS.AudioCondition)
  @objc public func videoConditionUpdate(videoCondition: MeetingSDK_iOS.VideoCondition)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ModeratorSDK : ObjectiveC.NSObject, Foundation.URLSessionWebSocketDelegate, MeetingSDK_iOS.USBWatcherDelegate {
  public var delegate: (any MeetingSDK_iOS.ModeratorSDKDelegate)?
  public static let shared: MeetingSDK_iOS.ModeratorSDK
  public func isLocalUser(_ userUUID: Swift.String) -> Swift.Bool
  public func connectWebSocket(meetingUUID: Swift.String, generatedUUID: Swift.String, msgServer: Swift.String, userUUID: Swift.String, mjwt: Swift.String)
  public func sendDeviceListUpdate()
  public func sendMessage(_ destination: Swift.String, _ message: Swift.String)
  public func setRemotePTZAllowed(_ value: Swift.Bool)
  public func getRemotePTZAllowed() -> Swift.Bool
  public func sendPTZCommand(user: Swift.String, device: Swift.String, command: Swift.String) -> Swift.Bool
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  public func closeSession()
  @objc deinit
}
public protocol USBWatcherDelegate : AnyObject {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VideoCondition : MeetingSDK_iOS.CMVideoCondition {
  @objc override dynamic public init()
  @objc deinit
}
public enum iOSCamera : Swift.String {
  case front
  case back
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CameraMode : Swift.String {
  case small
  case medium
  case large
  case hd1
  case hd2
  case hd3
  case fourK
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DebugLevel : Swift.Int {
  case none
  case err
  case warn
  case info
  case dbg1
  case dbg2
  case dbg3
  case dbg4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkQuality : Swift.Int {
  case none
  case compromised
  case fair
  case good
  case verygood
  case excellent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConnectionStatus : Swift.Int {
  case connected
  case connecting
  case disconnected
  case failed
  case reconnecting
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeetingSDK : ObjectiveC.NSObject {
  public static let shared: MeetingSDK_iOS.MeetingSDK
  public var delegate: (any MeetingSDK_iOS.MeetingSDKDelegate)?
  public func pauseVideoFrameProcessing(streamId: Swift.String)
  public func resumeVideoFrameProcessing(streamId: Swift.String)
  public func getParticipants() -> [MeetingSDK_iOS.Participant]
  public func joinMeeting(server: Swift.String, meetingUUID: Swift.String, key: Swift.String, userUUID: Swift.String = "", name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func joinMeetingWithToken(server: Swift.String, meetingUUID: Swift.String, token: Swift.String, userUUID: Swift.String = "", name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func joinMeetingWithToken(server: Swift.String, meetingUUID: Swift.String, token: Swift.String, jwt: Swift.String, name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func enableAudioInput(device: Swift.String) -> Swift.Bool
  public func disableAudioInput(device: Swift.String)
  public func disableAudioInput()
  public func enableAudioOutput(device: Swift.String) -> Swift.Bool
  public func disableAudioOutput(device: Swift.String)
  public func disableAudioOutput()
  public func enableAudioInputPreview(device: Swift.String) -> Swift.Bool
  public func disableAudioInputPreview(device: Swift.String) -> Swift.Bool
  public func enableAudioOutputPreview(device: Swift.String, soundPath: Swift.String) -> Swift.Bool
  public func disableAudioOutputPreview(device: Swift.String) -> Swift.Bool
  public func setAudioStreamVolume(streamId: Swift.String, volume: Swift.Int32) -> Swift.Bool
  public func setAudioInputVolume(_ volume: Swift.Int32) -> Swift.Bool
  public func setAudioOutputVolume(_ volume: Swift.Int32) -> Swift.Bool
  public func enableVideoCapture(camera: Swift.String, withMode: Swift.String, blurring: Swift.Bool = false, completion: @escaping (Swift.Bool) -> ())
  public func initializeScreenCaptureExtension(bundleId: Swift.String, appGroupId: Swift.String)
  public func disableVideoCapture(camera: Swift.String)
  public func enableImageCapture(displayName: Swift.String, directory: Swift.String, mode: Swift.String) -> Swift.Int32
  public func disableImageCapture(deviceId: Swift.Int32) -> Swift.Bool
  public func imageCapturePutImage(deviceId: Swift.Int32, data: Foundation.Data, width: Swift.Int32, height: Swift.Int32, size: Swift.Int32) -> Swift.Bool
  public func enableVideoPreview(camera: Swift.String, withMode: Swift.String, andBlurring: Swift.Bool = false, lowLevel: Swift.Bool, completion: @escaping (Swift.Bool) -> ())
  public func disableVideoPreview(camera: Swift.String)
  public func enableWindowSharing(windowId: Swift.String, mode: Swift.String) -> Swift.Bool
  public func disableWindowSharing(windowId: Swift.String) -> Swift.Bool
  public func enableNetworkVideo(url: Swift.String, mode: Swift.String, name: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func disableNetworkVideo(url: Swift.String)
  public func disableVideoStream(streamId: Swift.String)
  public func enableVideoStream(participant: MeetingSDK_iOS.Participant, streamId: Swift.String, lowLevel: Swift.Bool = false)
  public func exitMeeting()
  public func findVideoInfo(streamId: Swift.String) -> MeetingSDK_iOS.VideoInfo?
  public func findParticipant(withVideoStreamId: Swift.String) -> MeetingSDK_iOS.Participant?
  public func findParticipant(withAudioStreamId: Swift.String) -> MeetingSDK_iOS.Participant?
  public func enableCombinedLogs(_ enable: Swift.Bool)
  public func enableLogForwarding(_ enable: Swift.Bool)
  public func enableActiveLogging(_ filename: Swift.String)
  public func setTraceLevel(_ level: MeetingSDK_iOS.DebugLevel)
  public func audioSetTraceLevel(_ level: MeetingSDK_iOS.DebugLevel)
  public func videoSetTraceLevel(_ level: MeetingSDK_iOS.DebugLevel)
  public func videoTraceOutputHistory(_ filename: Swift.String)
  public func audioTraceOutputHistory(_ filename: Swift.String)
  public func coreMeetingTraceOutputHistory(_ filename: Swift.String)
  @objc public func setLogDirectory(_ path: Swift.String) -> Swift.Bool
  @objc public func deleteLogFile(_ fileName: Swift.String) -> Swift.Bool
  @objc public func deleteAllLogFiles() -> Swift.Bool
  @objc public func resetCurrentLogFile() -> Swift.Bool
  @objc public func trimCurrentLogFile(_ numBytes: Swift.Int32) -> Swift.Bool
  @objc public func flushCurrentLogFile() -> Swift.Bool
  @objc public func getLogFiles() -> [Swift.String]
  public func getVideoDevices() -> [Swift.String]
  public func getAudioInputDevices() -> [Swift.String]
  public func getAudioOutputDevices() -> [Swift.String]
  public func getTimeZone() -> Swift.String
  public func playSound(_ resource: Swift.String) -> Swift.UInt64
  public func stopSound(_ id: Swift.UInt64)
  public func getSupportedVideoSendResolutions(deviceId: Swift.String) -> [Swift.String]
  public func getLocalParticipant() -> MeetingSDK_iOS.Participant?
  @objc deinit
}
public protocol ModeratorSDKDelegate : AnyObject {
  func deviceListUpdated(_ deviceJSON: Swift.String)
}
extension MeetingSDK_iOS.iOSCamera : Swift.Equatable {}
extension MeetingSDK_iOS.iOSCamera : Swift.Hashable {}
extension MeetingSDK_iOS.iOSCamera : Swift.RawRepresentable {}
extension MeetingSDK_iOS.CameraMode : Swift.Equatable {}
extension MeetingSDK_iOS.CameraMode : Swift.Hashable {}
extension MeetingSDK_iOS.CameraMode : Swift.RawRepresentable {}
extension MeetingSDK_iOS.DebugLevel : Swift.Equatable {}
extension MeetingSDK_iOS.DebugLevel : Swift.Hashable {}
extension MeetingSDK_iOS.DebugLevel : Swift.RawRepresentable {}
extension MeetingSDK_iOS.NetworkQuality : Swift.Equatable {}
extension MeetingSDK_iOS.NetworkQuality : Swift.Hashable {}
extension MeetingSDK_iOS.NetworkQuality : Swift.RawRepresentable {}
extension MeetingSDK_iOS.ConnectionStatus : Swift.Equatable {}
extension MeetingSDK_iOS.ConnectionStatus : Swift.Hashable {}
extension MeetingSDK_iOS.ConnectionStatus : Swift.RawRepresentable {}
