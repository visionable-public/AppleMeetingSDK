#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef MEETINGSDK_IOS_SWIFT_H
#define MEETINGSDK_IOS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <MeetingSDK_iOS/MeetingSDK_iOS.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MeetingSDK_iOS",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Information about a given Participant’s audio.    Each participant will have only one AudioInfo record, except for the local Participant which has no AudioInfo object.
SWIFT_CLASS("_TtC14MeetingSDK_iOS9AudioInfo")
@interface AudioInfo : CMAudioInfo
- (nonnull instancetype)initWithStreamId:(NSString * _Nonnull)streamId SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The main high-level interface to the SDK.  This is a singleton that you will obtain through the ‘shared’ property
SWIFT_CLASS("_TtC14MeetingSDK_iOS10MeetingSDK")
@interface MeetingSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set the path to which log files should be written to
/// \param path An absolute path representing the directory to write log files to
///
///
/// returns:
/// true if the log directory was successfully created (or already exists), false if an error occurred
- (BOOL)setLogDirectory:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Delete a log file from the previously specified log directory
/// \param fileName The name of the file in the specified log directory to delete
///
///
/// returns:
/// true if the file was deleted, false if there was an error deleting the file or if no log directory has been specified
- (BOOL)deleteLogFile:(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
/// Delete all log files in the specified logging directory
///
/// returns:
/// true if the files were deleted, false if an error occurred or if no log directory has been specified
- (BOOL)deleteAllLogFiles SWIFT_WARN_UNUSED_RESULT;
/// Deletes all entries in the current log file but then continues to log to that log file
///
/// returns:
/// true if the reset was successful, false if an error occurred
- (BOOL)resetCurrentLogFile SWIFT_WARN_UNUSED_RESULT;
/// Trims the current log file to the most recent entries that fit within the speified number of bytes
/// \param numBytes The maximum number of bytes to leave in the log file
///
///
/// returns:
/// true if the operation was successful, false if there was no log directory or log file specified.
- (BOOL)trimCurrentLogFile:(int32_t)numBytes SWIFT_WARN_UNUSED_RESULT;
/// Flushes any buffered log messages to the current log file.
///
/// returns:
/// true if the operation was successful, false if there was no log directory or log file specified.
- (BOOL)flushCurrentLogFile SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of file names present in the specified log directory
///
/// returns:
/// An array of filename.   Returns an empty array if the logging directory has not been specified or if an error occurs.
- (NSArray<NSString *> * _Nonnull)getLogFiles SWIFT_WARN_UNUSED_RESULT;
@end


@class Participant;
@class VideoView;
@class NSData;

SWIFT_CLASS("_TtC14MeetingSDK_iOS24MeetingSDKDelegateBridge")
@interface MeetingSDKDelegateBridge : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)meetingTokenWithDecodedToken:(NSString * _Nonnull)decodedToken;
/// Called when a participant gets added, on the audio_site_changed callback
/// \param participant Current information of the corresponding participant
///
- (void)participantAddedWithParticipant:(Participant * _Nonnull)participant;
/// Called when a participant’s audio stream gets added.  You will never receive this for the local user
/// \param participant Current information of the corresponding participant
///
/// \param streamId Unique stream id
///
- (void)participantAudioAddedWithParticipant:(Participant * _Nonnull)participant streamId:(NSString * _Nonnull)streamId;
/// Called when a participant’s audio stream gets added.  You will never receive this for the local user
/// \param participant Current information of the corresponding participant
///
- (void)participantAudioUpdatedWithParticipant:(Participant * _Nonnull)participant;
/// Called when a participant gets added with a video stream, on the video_site_changed callback
/// \param participant Current information of the corresponding participant
///
/// \param streamId Unique stream id
///
- (void)participantVideoAddedWithParticipant:(Participant * _Nonnull)participant streamId:(NSString * _Nonnull)streamId;
/// Called when a participant video stream is updated with a new size
/// \param participant Current information of the corresponding participant
///
/// \param streamId Unique stream id
///
/// \param videoView The VideoView for the corresponding participant
///
- (void)participantVideoUpdatedWithParticipant:(Participant * _Nonnull)participant streamId:(NSString * _Nonnull)streamId;
/// Called when a video stream is enabled
/// \param partipant Current information of the corresponding participant
///
/// \param videoView The VideoView for the corresponding participant
///
/// \param local Boolean to know if this participant is the local video stream
///
- (void)participantVideoViewCreatedWithParticipant:(Participant * _Nonnull)participant videoView:(VideoView * _Nonnull)videoView local:(BOOL)local;
- (void)videoFrameReadyWithStreamId:(NSString * _Nonnull)streamId frame:(NSData * _Nonnull)frame;
- (void)videoPreviewReadyWithStreamId:(NSString * _Nonnull)streamId name:(NSString * _Nonnull)name width:(int32_t)width height:(int32_t)height;
- (void)previewVideoUpdatedWithStreamId:(NSString * _Nonnull)streamId;
- (void)previewFrameReadyWithStreamId:(NSString * _Nonnull)streamId frame:(NSData * _Nonnull)frame;
/// Called when a participant’s video is removed, on the video_stream_removed callback
/// \param participant Current information of the corresponding participant
///
/// \param videoView The VideoView for the corresponding participant
///
- (void)participantVideoRemovedWithParticipant:(Participant * _Nonnull)participant streamId:(NSString * _Nonnull)streamId;
/// Called when the remote layout of a participant’s video is changed
/// \param participant Current information of the corresponding participant
///
/// \param streamId Unique stream id
///
- (void)particpantVideoRemoteLayoutChangedWithParticipant:(Participant * _Nonnull)participant streamId:(NSString * _Nonnull)streamId;
/// Called when a participant leaves or is removed from the meeting, on the audio_stream_removed callback
/// \param participant Current information of the corresponding participant
///
- (void)participantRemovedWithParticipant:(Participant * _Nonnull)participant;
/// Called when the input volume is and gets the level of volume between 0 and 100
/// \param meter The level between 0 and 100
///
- (void)inputMeterChangedWithMeter:(NSInteger)meter;
/// Called when the output volume is changing and gets the level of volume between 0 and 100
/// \param meter The level between 0 and 100
///
- (void)outputMeterChangedWithMeter:(NSInteger)meter;
/// Called when a participant is inputting a volume and gets the level of volume between 0 and 100
/// \param participant The corresponding participant that is inputting volume
///
/// \param amplitude The level between 0 and 100
///
/// \param muted True if the participant is muted, false if not
///
- (void)participantAmplitudeChangedWithParticipant:(Participant * _Nonnull)participant amplitude:(NSInteger)amplitude muted:(BOOL)muted;
/// Called whenever a new log message has been logged from either the lower level SDK, IGVideo or IGAudio.  Only used if
/// the MeetingSDK method enableInlineAudioVideoLogging has been called with a parameter of “true”
/// \param level The log level
///
/// \param message The log message
///
- (void)logMessageWithLevel:(NSInteger)level message:(NSString * _Nonnull)message;
/// Called when a participant is inputting a volume and gets the level of volume between 0 and 100
/// \param participant The corresponding participant that is inputting volume
///
/// \param amplitude The level between 0 and 100
///
- (void)amplitudeWithParticipant:(Participant * _Nonnull)participant amplitude:(NSInteger)amplitude;
/// Called when a sound played via MeetingSDK.playSound() has completed
/// \param id The id of the sound that just completed playing
///
- (void)binaryPlaybackEndedWithId:(uint64_t)id;
/// Called when a sound played via MeetingSDK.playSound() has failed to play
/// \param id The id of the sound that just failed to play
///
- (void)binaryPlaybackFailedWithId:(uint64_t)id;
/// Called when an iOS screen share has been terminated (either by a “disableVideoCapture” call or by the user stopping it from the iOS controls)
/// \param id The id of the sound that just failed to play
///
- (void)screenShareCancelled;
@end


/// A single user in the meeting.   A Participant can have multiple video sources from one or more cameras and/or screen/window shares.
SWIFT_CLASS("_TtC14MeetingSDK_iOS11Participant")
@interface Participant : CMParticipant
- (nonnull instancetype)init:(NSString * _Nonnull)userUUID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserUUID:(NSString * _Nonnull)userUUID SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSXMLParser;

SWIFT_CLASS("_TtC14MeetingSDK_iOS15SimpleXMLParser")
@interface SimpleXMLParser : NSObject <NSXMLParserDelegate>
- (void)parser:(NSXMLParser * _Nonnull)parser didStartElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributeDict;
- (void)parser:(NSXMLParser * _Nonnull)parser foundCharacters:(NSString * _Nonnull)string;
- (void)parser:(NSXMLParser * _Nonnull)parser didEndElement:(NSString * _Nonnull)elementName namespaceURI:(NSString * _Nullable)namespaceURI qualifiedName:(NSString * _Nullable)qName;
- (void)parser:(NSXMLParser * _Nonnull)parser parseErrorOccurred:(NSError * _Nonnull)parseError;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Information about one of the Participant’s video sources
SWIFT_CLASS("_TtC14MeetingSDK_iOS9VideoInfo")
@interface VideoInfo : CMVideoInfo
- (nonnull instancetype)initWithStreamId:(NSString * _Nonnull)streamId SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImageView;
@class NSCoder;

/// A view in which a video stream will be rendered.  This is derived from NSView for the MacOS SDK and derived from UIView for the iOS SDK.      While the stream is active, the video associated with the stream will be rendered in this view.    You should add this view as a subview in your user interface to display the video.
SWIFT_CLASS("_TtC14MeetingSDK_iOS9VideoView")
@interface VideoView : UIView
/// The actual UIImageView used to render each frame of the video stream.   This is created automatically by the SDK.
@property (nonatomic, strong) UIImageView * _Nullable frameView;
/// A low level object containing the raw image data.  Only populated if enableVideoStream in the MeetingSDK singleton is called with an optional third argument (lowLevel) of true.   Currently this data will be in RGB888 format, but in future versions of the SDK will allow this format to be specified.
@property (nonatomic, copy) NSData * _Nonnull imageData;
/// The streamId associated with this video view
@property (nonatomic, copy) NSString * _Nonnull streamId;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
